<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head>



    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <meta name="generator" content="Roller Weblogger 4.0-dev">
               <link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://blogs.sun.com/CoreJavaTechTips/rsd">
        
            <link rel="alternate" type="application/atom+xml" title="Recent Entries (Atom)" href="http://blogs.sun.com/CoreJavaTechTips/feed/entries/atom">
    <link rel="alternate" type="application/rss+xml" title="Recent Entries (RSS)" href="http://blogs.sun.com/CoreJavaTechTips/feed/entries/rss">
    <link rel="alternate" type="application/atom+xml" title="Recent Comments (Atom)" href="http://blogs.sun.com/CoreJavaTechTips/feed/comments/atom">
    <link rel="alternate" type="application/rss+xml" title="Recent Comments (RSS)" href="http://blogs.sun.com/CoreJavaTechTips/feed/comments/rss"><title>Placing Components on Tabs : Core Java Technologies Tech Tips</title>

    
        
    <script type="text/javascript" language="JavaScript">
    <!-- //
    if (!((navigator.appVersion.indexOf('MSIE')!=-1) || (parseInt(navigator.appVersion)!=4)))
    {
        document.write("<STYLE TYPE=\"text/css\">");
        document.write("BODY { margin-top: -8px; margin-left: -8px; }");
        document.write("<\/style>");s
    };
    // -->
    </script>
    <link rel="stylesheet" type="text/css" media="all" href="placing_components_on_tabs2-Dateien/sunpacifico-custom.css"></head><body>


<!-- BEGIN A2 COMPONENT V.7 -->

<!-- END RIGHT NAV -->
    
<span class="entrytitle">Placing Components on Tabs</span><br>
   <div class="body">
                    <br>by John Zukowski

<p>The <code>JTabbedPane</code> component is a special Swing
container that accepts components to be placed within a panel for
each tab. Select a tab to see that tab's components. Technically
speaking, one component is associated with each tab. However, that
component is typically a panel that contains others. Identification
for each tab is done with title text and an icon, settable per tab.
The first Core Java Technologies Tech Tip to discuss the
<code>JTabbedPane</code> component was published in July 2001, with
a <a href="http://java.sun.com/developer/JDCTechTips/2001/tt0712.html#tip1" target="_blank">simple introductory tip</a>. </p>

<p>The methods of <code>JTabbedPane</code> to support the use of
components on tabs are as follows: </p>

<ul>
<li><code>public void setTabComponentAt(int index, Component component)</code>
</li><li><code>public Component getTabComponentAt(int index)</code>
</li><li><code>public int indexOfTabComponent(Component tabComponent)</code>
</li></ul>

<p>The first method associates the component with a tab; the second
gets it back; and the last one tells you which tab is associated
with the component, if any. Typically, you use only the first
method, but the others are available. </p>

<p>To get started with the task at hand, it is helpful to have an
Icon implementation that draws a little x on it. You could just use
the letter x as the button label, but you should avoid that option.
Typically, when a user sees an x in a box, this
signals a command to close a window, so it serves as a good
indicator for closing a tab. </p>

<pre>class CloseIcon implements Icon {
  public void paintIcon(Component c, Graphics g, int x, int y) {
    g.setColor(Color.RED);
    g.drawLine(6, 6, getIconWidth() - 7, getIconHeight() - 7);
    g.drawLine(getIconWidth() - 7, 6, 6, getIconHeight() - 7);
  }
  public int getIconWidth() {
    return 17;
  }
  public int getIconHeight() {
    return 17;
  }
}
</pre>

<p>Before creating the special tab component, let's put together the
program's framework, one that creates a frame with a
<code>JTabbedPane</code> on it and adds a number of tabs:</p>

<pre>import java.awt.*;
import java.awt.event.*;
import javax.swing.*;

public class CloseTabs {
  public static void main(String args[]) {
    Runnable runner = new Runnable() {
      public void run() {
        JFrame frame = new JFrame("JTabbedPane");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        JTabbedPane jtp = new JTabbedPane();
        frame.add(jtp, BorderLayout.CENTER);
        for (int i=0; i&lt;5; i++) {
          JButton button = new JButton("Card " + i);
          jtp.add("Btn " + i, button);
          // new CloseTabButton(jtp, i);
        }
        frame.setSize(400, 200);
        frame.setVisible(true);
      }
    };
    EventQueue.invokeLater(runner);
  }
}
</pre>

<p> This program creates five tabs, each with a <code>JButton</code>
on it. The tab title is "Btn" followed by the tab position.  </p>

<p></p><center>
<img src="placing_components_on_tabs2-Dateien/original.png">
</center><p></p>

<p>The program will run fine without doing anything else, but it
doesn't have the close button on each tab. To add a close button to
the tab, you need to retain the tab's title text and icon, while
adding a button with the <code>CloseIcon</code> previously shown.
(The
example does not use the tab's icon, but the class definition
includes one so that it can be reused beyond this example.) As the
final part of the definition, you need an
<code>ActionListener</code> for the button to handle when it is
pressed, so that when the user presses the button, the tab is
removed from the pane. </p>

<pre>class CloseTabButton extends JPanel implements ActionListener {
  private JTabbedPane pane;
  public CloseTabButton(JTabbedPane pane, int index) {
    this.pane = pane;
    setOpaque(false);
    add(new JLabel(
        pane.getTitleAt(index),
        pane.getIconAt(index),
        JLabel.LEFT));
    Icon closeIcon = new CloseIcon();
    JButton btClose = new JButton(closeIcon);
    btClose.setPreferredSize(new Dimension(
        closeIcon.getIconWidth(), closeIcon.getIconHeight()));
    add(btClose);
    btClose.addActionListener(this);
    pane.setTabComponentAt(index, this);
  }
  public void actionPerformed(ActionEvent e) {
    int i = pane.indexOfTabComponent(this);
    if (i != -1) {
      pane.remove(i);
    }
  }
}
</pre>

<p>You can now reuse the <code>CloseTabButton</code> in your own
tabbed panes. </p>
<p>
</p><center>
<img src="placing_components_on_tabs2-Dateien/close.png">
</center><p></p>

<p>
For more information on the use of tabbed panes, see the <a href="http://java.sun.com/tutorial/uiswing/components/tabbedpane.html" target="_blank">How to Use Tabbed
Panes</a> lesson in The Java Tutorial.
</p>

           </div>
   <div class="entryfooter">
            Posted at <a href="http://blogs.sun.com/CoreJavaTechTips/entry/placing_components_on_tabs2">11:36AM Jan 02, 2008</a>
            by dananourie in <span class="category">TechTip</span> &nbsp;|&nbsp;
                                        <a href="http://blogs.sun.com/CoreJavaTechTips/entry/placing_components_on_tabs2#comments" class="commentsLink">Comments[0]</a>
               </div>

           
    <div class="comments-form">
    </div>

</body></html>